1. 工作中遇到的困难，你是怎么解决的
2. 上面的问题讲了滑动优化：
    1. 上报的剪枝算法，每遍历一次时间从多少减低到多少
    2. 遇到了什么困难？ 有没有什么难点呢？ 假设遇到推其他团队推不动的情况怎么处理？
3. UIResponse 响应的过程
4. Block的机制，block怎么补货里面的值的，怎么做修改的？
5. Copy 和 strong 的区别，在什么时候用。
6. string 和 assign 和 weak 又有什么区别的？
7. 算法题 缺失的第一个正整数 leetcode 41

答案：
Block是一种特殊的语法结构，用于封装一段可执行的代码，并将这段代码作为一个对象传递。Block可以捕获当前作用域中的变量值，并在其它地方使用这些值。
Block的捕获机制分为两种：值捕获和指针捕获。
值捕获：如果Block中捕获了一个值类型的变量（例如int、float等），Block会自动将这个变量的值复制到自己的内存空间中。当Block中引用这个变量时，实际上引用的是自己内部的一个副本，而不是原来的变量。如果在Block内部修改这个变量的值，也不会影响原来的变量的值。
指针捕获：如果Block中捕获了一个指针类型的变量（例如NSArray、NSDictionary等），Block会捕获这个变量的地址，并将其保存到自己的内部。当Block中引用这个变量时，实际上引用的是这个变量的指针，而不是变量本身。如果在Block内部修改这个变量的值，也会影响原来的变量的值。
对于值捕获的变量，如果我们想要修改它的值，我们可以使用__block修饰符来声明这个变量。这样Block就会捕获这个变量的指针，并在Block内部引用这个指针。在Block内部修改这个变量的值，也会影响到原来的变量的值。
__block的原理

在 Objective-C 中，数值类型的变量同样有指针，因为数值类型也是一种数据类型。在 C 语言中，所有变量都有对应的指针类型，而 Objective-C 是基于 C 语言的，所以 Objective-C 中的数值类型也有对应的指针类型。
对于数值类型的变量，可以通过取地址符 "&" 来获取其指针

UIResponder 响应过程如下：

1. 当用户对UI元素进行操作时，iOS将会发送一个UIEvent到UIApplication对象，UIApplication对象将会根据UIEvent中的信息，将事件发送到那个UI元素上；

2. 当UIApplication发送UIEvent到UI元素时，该元素会调用指定的方法，比如说touchesBegan，touchesMoved，touchesEnded等；

3. UIResponder对象会根据调用的方法，做出相应的响应，比如改变位置，改变大小等；

4. 如果UIResponder对象没有实现指定的方法，那么UIResponder对象将会将调用传递给它的父类，以此类推，直到调用到UIWindow上；

5. 当UIWindow收到调用时，它会将调用传递给UIApplication，最终UIApplication将会做出相应的响应；

6. 最后UIApplication会将响应传递给UIEvent，完成UIResponder响应的过程。
UIResponder 对象的响应链（responder chain）定义了事件从第一个响应者对象传递到下一个响应者对象的顺序。响应链是由 UIApplication 对象开始的，它是整个应用程序的根响应者。当事件发生时，UIApplication 对象会将事件发送给当前的键盘或第一响应者，然后事件会从第一个响应者一直传递到响应链的末尾，直到有一个响应者对象处理事件或者响应链被完全遍历。
当事件到达一个 UIResponder 对象时，这个对象会检查自己是否能处理事件。如果能处理事件，它会调用对应的方法进行处理。如果不能处理事件，这个对象会将事件传递给下一个响应者对象。
在 iOS 中，有三种类型的事件：触摸事件（touch events）、远程控制事件（remote control events）和运动事件（motion events）。每种事件都有对应的方法进行处理。例如，当用户在屏幕上点击时，系统会生成一个触摸事件并将其传递给当前的响应者对象，响应者对象可以调用 touchesBegan:withEvent: 方法处理这个事件。
在事件传递过程中，还有一些方法可以干扰事件的传递。例如，响应者对象可以调用 resignFirstResponder 方法放弃第一响应者的身份，或者调用 becomeFirstResponder 方法成为第一响应者。
总的来说，UIResponder 对象的响应过程是一个事件传递的过程，从一个响应者对象传递到下一个响应者对象，直到有一个响应者对象处理了事件或者响应链被完全遍历。在这个过程中，响应者对象可以选择处理事件、将事件传递给其他响应者对象，或者直接忽略事件。
